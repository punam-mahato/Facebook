import akka.actor.{ ActorRef, ActorSystem, Props, Actor }
import scala.collection.mutable.HashMap
import scala.collection.mutable.ListBuffer
import scala.collection.mutable.Queue
import scala.collection.mutable.ArrayBuffer
import spray.json._
import DefaultJsonProtocol._

case class postReceived(postText: String, userID: Int,  time:Double, location:String)
case class updateTimeline(postText: String, userID: Int, friendsublist: ListBuffer[Int])
case class requestProfile(userID: Int)
case class requestPage(userID: Int)
case class requestFriendsList(userID: Int)
case class photoReceived(userID: Int,  albumId: String, photoId: String, source:String)
case class albumReceived(userID: Int,  albumId: String, photoId: String, source:String)
case class requestPhotos(userID: Int)

class ServerAssigner(nrUsers: Int, ac: ActorSystem, myID: Int, numServerAssigners: Int, friendsLimit: Int) extends Actor {


  var pagesTable = HashMap.empty[Int, Queue[Tuple2[String, Int]]]
  var postsTable = HashMap.empty[Int, Queue[Tuple2[String, Int]]]
  var friendsTable = HashMap.empty[Int, ListBuffer[Int]]
  var photosTable= HashMap.empty[Tuple2[Int, String], Tuple2[String, String]]


  val DEBUG = false



  def receive = {
    case "init" => init(sender)
    case "begin" => println("Initialisation done...")
    case updateTimeline(postText: String, userID: Int, friendsublist: ListBuffer[Int]) => updatePostQueue(postText: String, userID: Int, friendsublist: ListBuffer[Int])
    case requestProfile(userID: Int) => returnProfile(userID)
    case requestPage(userID: Int) => returnPage(userID)

    case postReceived(postText: String, userID: Int, time:Double, location:String) =>
	     println("post received")
      sendAllFriendsInfo(postText, userID)
      updatePostsTable(postText, userID)


    case photoReceived(userID: Int,  albumId: String, photoId: String, source:String) =>
        updatePhotosTable(userID,  albumId, photoId, source)
    case albumReceived(userID: Int,  albumId: String, photoId: String, source:String) =>
        updatePhotosTable(userID,  albumId, photoId, source)

    case requestFriendsList(userID: Int) => returnFriends(userID: Int)
    case requestPhotos(userID: Int) => returnPhotos(userID: Int)
    
    case "stop" => context.stop(self)
    case x => println("Default case for Server Assigner:" + x)
  }

  def init(router: ActorRef) {

    var rnd = new scala.util.Random



    for (x <- 0 to nrUsers - 1) {

      if ((x % numServerAssigners) == myID) {

        var quantity = rnd.nextInt(friendsLimit)
        var seq: ListBuffer[Int] = new ListBuffer

        for (y <- 0 to quantity) {
          var randomNumber = rnd.nextInt(nrUsers - 1)
          while ((randomNumber < 0) || (seq.contains(randomNumber))) {
            randomNumber = rnd.nextInt(nrUsers)
          }
          seq += randomNumber

        }
        if (!seq.contains(x)) {
          seq += x
        }

        if (DEBUG) {
          println("for owner : " + x)
          var z = 0
          for (z <- 0 to seq.length) {
            print(" " + z)
          }
        }
        updatefriendsTable(x, seq)
      }
    }
    if (DEBUG) {
      println("Followers table")
      println(friendsTable.keys + " " + friendsTable.values)
    }
    
  }

  def sendAllFriendsInfo(postText: String, userID: Int) {

    var retrievedFriends: ListBuffer[Int] = friendsTable.getOrElse(userID, null)

    if (DEBUG) {
      if (retrievedFriends != null) {
        println("retrievedFriends for given userID " + userID)
        
        println(retrievedFriends.mkString(","))
      }
    }

    var partitionedFriends = retrievedFriends.groupBy(x => x % numServerAssigners)

    if (DEBUG) {
      println("partitioned followers for given userID " + userID)
      partitionedFriends.foreach { i => println(i) }
    }



    for (x <- 0 to numServerAssigners - 1) {
      var temp = partitionedFriends.getOrElse((x), null)

      if (temp != null) {
        if (DEBUG) {
          println(temp)
        }

        context.actorSelection("akka://TwitterServer/user/" + (x)) ! updateTimeline(postText, userID, temp)
      }
    }

  }
  

  def updatePostQueue(postText: String, userID: Int, friendsublist: ListBuffer[Int]) {


    var newMember = new Tuple2(postText, userID)
    for (member <- friendsublist) {

      
      var postsQ = pagesTable.getOrElse(member, null)

      if (postsQ == null) {
        
        postsQ = Queue(newMember);

      } else {
        postsQ.enqueue(newMember)

        
        if (postsQ.length > 100) {
          postsQ.dequeue
        }

      }
      
      pagesTable.put(member, postsQ)

      if (DEBUG) {
        println("=" * 20)
        println("inserted text: " + newMember + " into timeline of :" + member)
        println("=" * 20)
      }
    }
  }
  
  def updatePostsTable(postText: String, userID: Int){
     var newMember = new Tuple2(postText, userID)
      var postsQ = postsTable.getOrElse(userID, null)

      if (postsQ == null) {
        
        postsQ = Queue(newMember);

      } else {
        postsQ.enqueue(newMember)

        
        if (postsQ.length > 100) {
          postsQ.dequeue
        }

      }
      
      postsTable.put(userID, postsQ)
	}

  def returnPage(userID: Int) {
    
    if (DEBUG) {
      println("#" * 200)
      println("inside returnPage")
    }

    var myVar = pagesTable.getOrElse(userID, null)

    if (DEBUG) {
      if (myVar != null) {
        println("myVar")
        println(myVar.mkString("\n"))
      }
    }


    if (myVar != null) {
      val qList: scala.collection.immutable.List[Tuple2[String, Int]] = myVar.toList 
      var x = qList.toJson
      
      sender ! x

      
    }
    else
    {
      sender ! List("No Posts on timeline!").toJson
    }
  }

  def returnProfile(userID: Int) {
    //return the queue for userID
    if (DEBUG) {
      println("#" * 200)
      println("inside returnProfile")
    }

    var myVar = postsTable.getOrElse(userID, null)

    if (DEBUG) {
      if (myVar != null) {
        println("myVar")
        println(myVar.mkString("\n"))
      }
    }

    
    if (myVar != null) {
      val qList: scala.collection.immutable.List[Tuple2[String, Int]] = myVar.toList 
      var x = qList.toJson
      
      sender ! x

      
    }
    else
    {
      sender ! List("No Posts on timeline!").toJson
    }
  }

  def returnPhotos(userID: Int) {
    //return the queue for userID
    if (DEBUG) {
      println("#" * 200)
      println("inside returnPhotos")
    }
    var myVar = photosTable.filterKeys(_._1==userID)
    //var myVar = photosTable.getOrElse(userID, null)

    if (DEBUG) {
      if (myVar != null) {
        println("myVar")
        println(myVar.mkString("\n"))
      }
    }

    
    if (myVar != null) {
      //val qList: scala.collection.immutable.List[Tuple2[String, Int]] = myVar.toList 
      var x = (myVar.toList).toJson
      
      sender ! x

      
    }
    else
    {
      sender ! List("No Posts on timeline!").toJson
    }
  }



  def updatefriendsTable(user: Int, friendsList: ListBuffer[Int]) {
    if (!(friendsList.isEmpty)) {
      friendsTable.put(user, friendsList)
    }
  }

  def returnFriends(userID: Int) {
    var friendsList = friendsTable(userID).toList //OrElse(userID,List(-1))
    sender ! friendsList.toJson
  }



  def updatePhotosTable(userID: Int,  albumId: String, photoId: String, source:String){
    var newPhotoKey = (userID, albumId)
    var newPhotoValue = (photoId, source)
    photosTable.put(newPhotoKey, newPhotoValue)
    println("photosTable: "+ photosTable)    
  }


}

object MyJsonProtocol extends DefaultJsonProtocol {
  implicit def ListFormat[A: JsonFormat] = jsonFormat1(scala.collection.immutable.List.apply[A])
}

